{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "buy"
      ],
      "properties": {
        "buy": {
          "type": "object",
          "required": [
            "min_amount"
          ],
          "properties": {
            "min_amount": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "claim_rewards"
      ],
      "properties": {
        "claim_rewards": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "governance"
      ],
      "properties": {
        "governance": {
          "type": "object",
          "required": [
            "msg"
          ],
          "properties": {
            "msg": {
              "$ref": "#/definitions/GovernanceMsg"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "accept_governance"
      ],
      "properties": {
        "accept_governance": {
          "type": "object"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      }
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "GovernanceMsg": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "phase"
          ],
          "properties": {
            "phase": {
              "type": "object",
              "required": [
                "phase"
              ],
              "properties": {
                "phase": {
                  "$ref": "#/definitions/Phase"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "update_config"
          ],
          "properties": {
            "update_config": {
              "type": "object",
              "properties": {
                "astro_generator": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "astro_token": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "autostake_lp_tokens": {
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "bond_cost_in_utility_tokens": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Decimal"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "community_pool": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "psi_token": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "utility_token": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "vesting": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "vesting_period": {
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint64",
                  "minimum": 0.0
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "update_pairs"
          ],
          "properties": {
            "update_pairs": {
              "type": "object",
              "required": [
                "add",
                "remove"
              ],
              "properties": {
                "add": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "remove": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "update_governance_contract"
          ],
          "properties": {
            "update_governance_contract": {
              "type": "object",
              "required": [
                "addr",
                "seconds_to_wait_for_accept_gov_tx"
              ],
              "properties": {
                "addr": {
                  "type": "string"
                },
                "seconds_to_wait_for_accept_gov_tx": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Phase": {
      "type": "object",
      "required": [
        "end_time",
        "max_discount",
        "psi_amount_start",
        "psi_amount_total",
        "start_time"
      ],
      "properties": {
        "end_time": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "max_discount": {
          "$ref": "#/definitions/Decimal"
        },
        "psi_amount_start": {
          "$ref": "#/definitions/Uint128"
        },
        "psi_amount_total": {
          "$ref": "#/definitions/Uint128"
        },
        "start_time": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
